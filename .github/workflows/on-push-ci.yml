name: CI/CD On Push Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write
    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - uses: actions/checkout@v3
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}
          source-url: ${{ vars.NUGET_SOURCE_URL }}

      # - name: Debug Root Directory
      #   run: ls -la

      - name: Dotnet restore solution
        run: dotnet restore AssessGrader.sln

      - name: Dotnet build solution
        run: dotnet build AssessGrader.sln

  test:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      test-results: ${{ steps.test.outputs.test-results }}
    steps:
      - uses: actions/checkout@v3
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
           dotnet-version: ${{ vars.DOTNET_VERSION }}
           source-url: ${{ vars.NUGET_SOURCE_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}

      - name: Test
        run: dotnet test ${{ vars.SOLUTION_PATH }} --logger "trx;LogFileName=test-results.trx" || true  *With this CI continue to run whether tests fail or not

      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      # - name: Check xmlstarlet installation path
      #   run: which xmlstarlet

      - name: List Test Results Directory
        run: ls -la /home/runner/work/AssessmentSystem/AssessmentSystem/Assesment.Tests/TestResults/

      - name: Print TRX file content
        run: cat /home/runner/work/AssessmentSystem/AssessmentSystem/Assesment.Tests/TestResults/test-results.trx

      - name: Read values from XML file
        id: read-xml
        run: |
         xml_file="/home/runner/work/AssessmentSystem/AssessmentSystem/Assesment.Tests/TestResults/test-results.trx"
         xmlstarlet sel -t -c "/" "$xml_file" > trx_content.xml
         echo "TRX_FILE_PATH=trx_content.xml" >> $GITHUB_ENV

      - name: Get Element
        run: |
         set -e
         xml_file="${{ env.TRX_FILE_PATH }}"
         if [ ! -f "$xml_file" ]; then
            echo "Error: TRX file not found: $xml_file"
            exit 1
         fi
         specific_element=$(xmlstarlet sel -t -v "//ns:UnitTestResult[last()]/ns:Output/ns:StdOut" "$xml_file" 2>/dev/null || echo "Error: XPath expression not found")
         if [ "$specific_element" = "Error: XPath expression not found" ]; then
            echo "Error: XPath expression not found in the XML file."
            exit 1
         fi
         echo "$specific_element" > result.txt
         echo "SPECIFIC_ELEMENT=result.txt" >> $GITHUB_ENV
         
      - name: Print TRX content
        run: |
          cat "${{ env.SPECIFIC_ELEMENT }}"