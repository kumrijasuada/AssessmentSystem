name: Exam Pipeline

on:
  push:
    branches:
      - 'exam/*'
  pull_request:
    branches:
      - 'exam/*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:




jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine branch names and check conditions
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
            DEST_BRANCH="${{ github.event.pull_request.base.ref }}"
            echo "PR from $SOURCE_BRANCH to $DEST_BRANCH"
            SPECIFIC_SOURCE_PART=${SOURCE_BRANCH##*/}
            if [[ "$DEST_BRANCH" == *"$SPECIFIC_SOURCE_PART"* ]]; then
              echo "Destination branch '$DEST_BRANCH' contains the specific part of the source branch name '$SPECIFIC_SOURCE_PART'."
            else
              echo "Destination branch '$DEST_BRANCH' does not contain the specific part of the source branch name '$SPECIFIC_SOURCE_PART'."
              exit 1
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Push to $BRANCH_NAME"
          fi

      - uses: actions/checkout@v3
      - name: Checkout Code
        if: github.event_name == 'push'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}
          source-url: ${{ vars.NUGET_SOURCE_URL }}

      - name: Dotnet restore solution
        if: github.event_name == 'push'
        run: dotnet restore AssessGrader.sln

      - name: Dotnet build solution
        if: github.event_name == 'push'
        run: dotnet build AssessGrader.sln

  # get-result:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   outputs:
  #     test_result: ${{ steps.get-result-output.outputs.test_result }}
  #   permissions: write-all

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Checkout Code
  #       uses: actions/setup-dotnet@v3
  #       with:
  #          dotnet-version: ${{ vars.DOTNET_VERSION }}
  #          source-url: ${{ vars.NUGET_SOURCE_URL }}
  #       env:
  #         NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
  #         GITHUB_TOKEN: ${{ github.token }}

  #     - name: Run Test Scenarios
  #       run: dotnet test ${{ vars.SOLUTION_PATH }} --logger "trx;LogFileName=test-results.trx" || true  *With this CI continue to run whether tests fail or not

  #     - name: Get Results
  #       id: get-result-output
  #       run: |
  #           xml_file="/home/runner/work/AssessmentSystem/AssessmentSystem/Assesment.Tests/TestResults/test-results.trx"
  #           test_result=$(grep -o '<StdOut>.*</StdOut>' "$xml_file" | sed 's/<StdOut>\(.*\)<\/StdOut>/\1/')
  #           echo "::set-output name=test_result::$test_result"
   
  #     - name: Print Test Results
  #       run: |
  #         echo "${{ steps.get-result-output.outputs.test_result }}"

  get-result:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      test_result: ${{ steps.get-result-output.outputs.test_result }}
    permissions:
      contents: write
      actions: write
      checks: write

    steps:
      - uses: actions/checkout@v3  # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: ${{ vars.DOTNET_VERSION }}
            source-url: ${{ vars.NUGET_SOURCE_URL }}
        env:
           NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
           GITHUB_TOKEN: ${{ github.token }}

      - name: Run Test Scenarios
        run: dotnet test ${{ vars.SOLUTION_PATH }} --logger "trx;LogFileName=test-results.trx" || true  *With this CI continue to run whether tests fail or not

      - name: Get Results
        id: get-result-output
        run: |
            xml_file="/home/runner/work/AssessmentSystem/AssessmentSystem/Assesment.Tests/TestResults/test-results.trx"
            test_result=$(grep -o '<StdOut>.*</StdOut>' "$xml_file" | sed 's/<StdOut>\(.*\)<\/StdOut>/\1/')
            echo "::set-output name=test_result::$test_result"
 

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth

      - name: Update Google Sheet
        env:
          CREDENTIALS_JSON: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
          TEST_RESULT: ${{ steps.get-result-output.outputs.test_result }}
          SHEET_URL: 'https://docs.google.com/spreadsheets/d/1zjlEgnJLeNjdJmlS7j-1u-jchSdktE0SDvnOFRz7P0o/edit'
        run: |
            python -c "import gspread, json; from google.oauth2.service_account import Credentials; \
            creds_json = json.loads('${{ env.CREDENTIALS_JSON }}'.replace('\'', '\\\'')); \
            credentials = Credentials.from_service_account_info(creds_json); \
            gc = gspread.authorize(credentials); \
            sh = gc.open_by_url('${{ env.SHEET_URL }}'); \
            worksheet = sh.get_worksheet(0); \
            test_result = '${{ env.TEST_RESULT }}'.split('&lt;br&gt;'); \
            worksheet.append_row(test_result)"


  send-notification:
    needs: get-result
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get last pull request number
        id: get-pr-number
        run: |
          pr_number=$(git log -1 --pretty=format:%s | grep -oP '#\d+')
          pr_number=${pr_number//#/}  # Remove '#' symbol
          echo "::set-output name=pr_number::$pr_number"    
     
      - name: Add Comment
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const testResult = '${{ needs.get-result.outputs.test_result }}';
            let formattedResult;
            if (testResult.trim() === '') {
            formattedResult = "Sorry you have failed. <br> Total earned points : **0**";
            } else {
            formattedResult = testResult.replace(/&lt;br&gt;/g, '<br>');
            }
            github.rest.issues.createComment({
              issue_number: ${{ steps.get-pr-number.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: formattedResult
              })
