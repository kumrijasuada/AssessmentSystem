name: CI/CD On Push Workflow

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: read-all
    env:
      ACTIONS_STEP_DEBUG: true
      # PROJECT_FILE_PATH: "AssesmentSystem/Assess.csproj"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}
          source-url: ${{ vars.NUGET_SOURCE_URL }}

      # # Change current directory to AssesmentSystem
      # - name: Change directory to AssesmentSystem
      #   run: cd AssesmentSystem

      - name: Debug Root Directory
        run: ls -la

        # Dotnet restore (restore dependencies for all projects within the solution)
      - name: Dotnet restore solution
        run: dotnet restore AssessGrader.sln

      # Dotnet build (build the entire solution)
      - name: Dotnet build solution
        run: dotnet build AssessGrader.sln


      # # Dotnet build (build the specific project file)
      # - name: Dotnet build $PROJECT_FILE_PATH
      #   run: dotnet build $PROJECT_FILE_PATH

      # - name: Dotnet Restore
      #   run: dotnet restore ${{ vars.SOLUTION_PATH }}
      # - name: Dotnet Build
      #   run: dotnet build ${{ vars.SOLUTION_PATH }}
    
  test:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
           dotnet-version: ${{ vars.DOTNET_VERSION }}
           source-url: ${{ vars.NUGET_SOURCE_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
      - name: Test
        # run: dotnet test ${{ vars.SOLUTION_PATH }} --logger "trx;LogFileName=test-results.trx" || true  *With this CI continue to run whether tests fail or not
        run: dotnet test ${{ vars.SOLUTION_PATH }} --logger "trx;LogFileName=test-results.trx"
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: DotNET Tests
          path: "**/test-results.trx"
          reporter: dotnet-trx
          fail-on-error: true

