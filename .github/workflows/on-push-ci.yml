name: Exam Pipeline

on:
  push:
    branches:
      - 'exam/*'
  pull_request:
    branches:
      - 'exam/*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    env:
      ACTIONS_STEP_DEBUG: true
    outputs:
      studentname: ${{ steps.set_output.outputs.studentname }}
      changes_present: ${{ steps.filter.outputs.changes_present }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for Pull Request
        id: filter
        run: |
          pr_number=$(git log -1 --pretty=format:%s | grep -oP '#\d+' || true)
          pr_number=${pr_number//#/}  # Remove '#' symbol
          if [ -n "$pr_number" ]; then
              echo "PR number is $pr_number"
              echo "::set-output name=changes_present::true"
          else
              echo "No PR number found"
              echo "::set-output name=changes_present::false"
          fi

      - name: Determine branch names and check conditions
        id: set_output
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
            DEST_BRANCH="${{ github.event.pull_request.base.ref }}"
            echo "PR from $SOURCE_BRANCH to $DEST_BRANCH"
            SPECIFIC_SOURCE_PART=${SOURCE_BRANCH##*/}
            echo "studentname=$SPECIFIC_SOURCE_PART" >> $GITHUB_OUTPUT
            if [[ "$DEST_BRANCH" == *"$SPECIFIC_SOURCE_PART"* ]]; then
              echo "Destination branch '$DEST_BRANCH' contains the specific part of the source branch name '$SPECIFIC_SOURCE_PART'."
            else
              echo "Destination branch '$DEST_BRANCH' does not contain the specific part of the source branch name '$SPECIFIC_SOURCE_PART'."
              exit 1
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SPECIFIC_SOURCE_PART=${BRANCH_NAME##*/}
            echo "studentname=$SPECIFIC_SOURCE_PART" >> $GITHUB_OUTPUT
            echo "Push to $BRANCH_NAME"
          fi
          
      - uses: actions/checkout@v3
      - name: Checkout Code
        if: github.event_name == 'push' && steps.filter.outputs.changes_present == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}
          source-url: ${{ vars.NUGET_SOURCE_URL }}

      - name: Dotnet restore solution
        if: github.event_name == 'push' && steps.filter.outputs.changes_present == 'true'
        run: dotnet restore AssessGrader.sln

      - name: Dotnet build solution
        if: github.event_name == 'push' && steps.filter.outputs.changes_present == 'true'
        run: dotnet build AssessGrader.sln


  get-result:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && needs.build.outputs.changes_present == 'true'
    outputs:
      test_result: ${{ steps.get-result-output.outputs.test_result }}
    permissions:
      contents: write
      actions: write
      checks: write

    steps:
      - uses: actions/checkout@v3  # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: ${{ vars.DOTNET_VERSION }}
            source-url: ${{ vars.NUGET_SOURCE_URL }}
        env:
           NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
           GITHUB_TOKEN: ${{ github.token }}

      - name: Run Test Scenarios
        run: dotnet test ${{ vars.SOLUTION_PATH }} --logger "trx;LogFileName=test-results.trx" || true  *With this CI continue to run whether tests fail or not

      - name: Get Results
        id: get-result-output
        run: |
            xml_file="/home/runner/work/AssessmentSystem/AssessmentSystem/Assesment.Tests/TestResults/test-results.trx"
            test_result=$(grep -o '<StdOut>.*</StdOut>' "$xml_file" | sed 's/<StdOut>\(.*\)<\/StdOut>/\1/')
            echo "::set-output name=test_result::$test_result"
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python Environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install numpy pandas gspread google-auth

      - name: Update Google Sheet
        env:
          BASE64_ENCODED_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
          SHEET_URL: 'https://docs.google.com/spreadsheets/d/1zjlEgnJLeNjdJmlS7j-1u-jchSdktE0SDvnOFRz7P0o/edit'
          TEST_RESULT: ${{ steps.get-result-output.outputs.test_result }}
          STUDENT: ${{ needs.build.outputs.studentname }}
        run: |
              run: |
                                   python3 -c "
                import json, base64, gspread, re
                from google.oauth2.service_account import Credentials

                # Decode and load credentials
                creds_json = json.loads(base64.b64decode('${{ env.BASE64_ENCODED_CREDENTIALS }}').decode('utf-8'))
                credentials = Credentials.from_service_account_info(creds_json, scopes=['https://www.googleapis.com/auth/spreadsheets'])

                # Authorize and open the spreadsheet
                gc = gspread.authorize(credentials)
                sh = gc.open_by_url('${{ env.SHEET_URL }}')
                worksheet = sh.get_worksheet(0)

                # Retrieve environment variables
                results = '${{ env.TEST_RESULT }}'
                name = '${{ env.STUDENT }}'

                # Format name to insert spaces before capital letters if next to lowercase letters
                formatted_name = re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', name)
                print(formatted_name)

                # Determine score and update spreadsheet based on results
                if results.strip() == '':
                    total_points = '50'
                    passed = '0'
                    fail = '50'
                else:
                    total_points = re.search(r'Total Points: \*\*(\d+)\*\*', results).group(1)
                    passed = re.search(r'Passed: \*\*(\d+)\*\*', results).group(1)
                    fail = re.search(r'Fail: \*\*(\d+)\*\*', results).group(1)

                # Find the next empty row
                next_row = len(worksheet.get_all_values()) + 1

                # Update the spreadsheet
                worksheet.update_acell(f'A{next_row}', formatted_name)
                worksheet.update_acell(f'B{next_row}', total_points)
                worksheet.update_acell(f'C{next_row}', passed)
                worksheet.update_acell(f'D{next_row}', fail)
                "  


  send-notification:
    needs: get-result
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && needs.build.outputs.changes_present == 'true'
    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get last pull request number
        id: get-pr-number
        run: |
          pr_number=$(git log -1 --pretty=format:%s | grep -oP '#\d+')
          pr_number=${pr_number//#/}  # Remove '#' symbol
          echo "::set-output name=pr_number::$pr_number"    
     
      - name: Add Comment
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const testResult = '${{ needs.get-result.outputs.test_result }}';
            let formattedResult;
            if (testResult.trim() === '') {
            formattedResult = "Sorry you have failed. <br> Total earned points : **0**";
            } else {
            formattedResult = testResult.replace(/&lt;br&gt;/g, '<br>');
            }
            github.rest.issues.createComment({
              issue_number: ${{ steps.get-pr-number.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: formattedResult
              })
