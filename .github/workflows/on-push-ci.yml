name: Exam Pipeline

on:
  push:
    branches:
      - 'exam/*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write
    env:
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if merge commit from PR
        id: check_merge
        run: |
          echo "Commit message: ${{ github.event.head_commit.message }}"
          if [[ "${{ github.event.head_commit.message }}" =~ Merge\ pull\ request\ #[0-9]+\ from\ (.+) ]]; then
            echo "::set-output name=source_branch::${BASH_REMATCH[1]}"
          fi

      - name: Display source branch of the PR
        if: steps.check_merge.outputs.source_branch
        run: |
          echo "This push is a merge from branch '${{ steps.check_merge.outputs.source_branch }}'"
          echo "Destination branch is '${GITHUB_REF#refs/heads/}'"

      - name: Check if destination branch contains source branch name
        if: steps.check_merge.outputs.source_branch
        run: |
          DEST_BRANCH="${GITHUB_REF#refs/heads/}"
          SOURCE_BRANCH="${{ steps.check_merge.outputs.source_branch }}"
          if [[ "$DEST_BRANCH" == *"$SOURCE_BRANCH"* ]]; then
            echo "Destination branch '$DEST_BRANCH' contains the source branch name '$SOURCE_BRANCH'."
          else
            echo "Destination branch '$DEST_BRANCH' does not contain the source branch name '$SOURCE_BRANCH'."
            exit 1
          fi
      - uses: actions/checkout@v3
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}
          source-url: ${{ vars.NUGET_SOURCE_URL }}

      - name: Dotnet restore solution
        run: dotnet restore AssessGrader.sln

      - name: Dotnet build solution
        run: dotnet build AssessGrader.sln

  get-result:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      test_result: ${{ steps.get-result-output.outputs.test_result }}
    permissions: write-all

    steps:
      - uses: actions/checkout@v3
      - name: Checkout Code
        uses: actions/setup-dotnet@v3
        with:
           dotnet-version: ${{ vars.DOTNET_VERSION }}
           source-url: ${{ vars.NUGET_SOURCE_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run Test Scenarios
        run: dotnet test ${{ vars.SOLUTION_PATH }} --logger "trx;LogFileName=test-results.trx" || true  *With this CI continue to run whether tests fail or not

      - name: Get Results
        id: get-result-output
        run: |
            xml_file="/home/runner/work/AssessmentSystem/AssessmentSystem/Assesment.Tests/TestResults/test-results.trx"
            test_result=$(grep -o '<StdOut>.*</StdOut>' "$xml_file" | sed 's/<StdOut>\(.*\)<\/StdOut>/\1/')
            echo "::set-output name=test_result::$test_result"
   
      - name: Print Test Results
        run: |
          echo "${{ steps.get-result-output.outputs.test_result }}"

  send-notification:
    needs: get-result
    runs-on: ubuntu-latest
    if: always()
    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get last pull request number
        id: get-pr-number
        run: |
          pr_number=$(git log -1 --pretty=format:%s | grep -oP '#\d+')
          pr_number=${pr_number//#/}  # Remove '#' symbol
          echo "::set-output name=pr_number::$pr_number"    
     
      - name: Add Comment
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const testResult = '${{ needs.get-result.outputs.test_result }}';
            let formattedResult;
            if (testResult.trim() === '') {
            formattedResult = "Sorry you have failed. <br> Total earned points : **0**";
            } else {
            formattedResult = testResult.replace(/&lt;br&gt;/g, '<br>');
            }
            github.rest.issues.createComment({
              issue_number: ${{ steps.get-pr-number.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: formattedResult
              })
